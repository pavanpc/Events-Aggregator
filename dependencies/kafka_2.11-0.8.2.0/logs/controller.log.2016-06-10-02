[2016-06-10 02:21:45,515] INFO [SessionExpirationListener on 0], ZK expired; shut down all controller components and try to re-elect (kafka.controller.KafkaController$SessionExpirationListener)
[2016-06-10 02:21:45,516] INFO [Partition state machine on Controller 0]: Stopped partition state machine (kafka.controller.PartitionStateMachine)
[2016-06-10 02:21:45,516] INFO [Replica state machine on controller 0]: Stopped replica state machine (kafka.controller.ReplicaStateMachine)
[2016-06-10 02:21:45,516] INFO [Controller-0-to-broker-0-send-thread], Shutting down (kafka.controller.RequestSendThread)
[2016-06-10 02:21:45,517] INFO [Controller-0-to-broker-0-send-thread], Stopped  (kafka.controller.RequestSendThread)
[2016-06-10 02:21:45,517] INFO [Controller-0-to-broker-0-send-thread], Shutdown completed (kafka.controller.RequestSendThread)
[2016-06-10 02:21:45,519] INFO [Controller 0]: Broker 0 starting become controller state transition (kafka.controller.KafkaController)
[2016-06-10 02:21:45,520] INFO [Controller 0]: Initialized controller epoch to 3 and zk version 2 (kafka.controller.KafkaController)
[2016-06-10 02:21:45,520] INFO [Controller 0]: Controller 0 incremented epoch to 4 (kafka.controller.KafkaController)
[2016-06-10 02:21:45,527] INFO [Controller 0]: Partitions undergoing preferred replica election:  (kafka.controller.KafkaController)
[2016-06-10 02:21:45,527] INFO [Controller 0]: Partitions that completed preferred replica election:  (kafka.controller.KafkaController)
[2016-06-10 02:21:45,527] INFO [Controller 0]: Resuming preferred replica election for partitions:  (kafka.controller.KafkaController)
[2016-06-10 02:21:45,527] INFO [Controller 0]: Partitions being reassigned: Map() (kafka.controller.KafkaController)
[2016-06-10 02:21:45,527] INFO [Controller 0]: Partitions already reassigned: List() (kafka.controller.KafkaController)
[2016-06-10 02:21:45,527] INFO [Controller 0]: Resuming reassignment of partitions: Map() (kafka.controller.KafkaController)
[2016-06-10 02:21:45,528] INFO [Controller 0]: List of topics to be deleted:  (kafka.controller.KafkaController)
[2016-06-10 02:21:45,528] INFO [Controller 0]: List of topics ineligible for deletion: get_social_events (kafka.controller.KafkaController)
[2016-06-10 02:21:45,528] INFO [Controller 0]: Currently active brokers in the cluster: Set() (kafka.controller.KafkaController)
[2016-06-10 02:21:45,528] INFO [Controller 0]: Currently shutting brokers in the cluster: Set() (kafka.controller.KafkaController)
[2016-06-10 02:21:45,528] INFO [Controller 0]: Current list of topics in the cluster: Set(get_social_events) (kafka.controller.KafkaController)
[2016-06-10 02:21:45,528] INFO [Replica state machine on controller 0]: Started replica state machine with initial state -> Map([Topic=get_social_events,Partition=1,Replica=0] -> ReplicaDeletionIneligible, [Topic=get_social_events,Partition=0,Replica=0] -> ReplicaDeletionIneligible) (kafka.controller.ReplicaStateMachine)
[2016-06-10 02:21:45,531] DEBUG [OfflinePartitionLeaderSelector]: No broker in ISR is alive for [get_social_events,1]. Pick the leader from the alive assigned replicas:  (kafka.controller.OfflinePartitionLeaderSelector)
[2016-06-10 02:21:45,534] DEBUG [OfflinePartitionLeaderSelector]: No broker in ISR is alive for [get_social_events,0]. Pick the leader from the alive assigned replicas:  (kafka.controller.OfflinePartitionLeaderSelector)
[2016-06-10 02:21:45,534] INFO [Partition state machine on Controller 0]: Started partition state machine with initial state -> Map([get_social_events,1] -> OfflinePartition, [get_social_events,0] -> OfflinePartition) (kafka.controller.PartitionStateMachine)
[2016-06-10 02:21:45,534] INFO [Controller 0]: Broker 0 is ready to serve as the new controller with epoch 4 (kafka.controller.KafkaController)
[2016-06-10 02:21:45,534] INFO [Controller 0]: Starting preferred replica leader election for partitions  (kafka.controller.KafkaController)
[2016-06-10 02:21:45,534] INFO [Partition state machine on Controller 0]: Invoking state change to OnlinePartition for partitions  (kafka.controller.PartitionStateMachine)
[2016-06-10 02:21:45,535] INFO [Controller 0]: starting the partition rebalance scheduler (kafka.controller.KafkaController)
[2016-06-10 02:21:45,537] INFO [BrokerChangeListener on Controller 0]: Broker change listener fired for path /brokers/ids with children 0 (kafka.controller.ReplicaStateMachine$BrokerChangeListener)
[2016-06-10 02:21:45,540] INFO [BrokerChangeListener on Controller 0]: Newly added brokers: 0, deleted brokers: , all live brokers: 0 (kafka.controller.ReplicaStateMachine$BrokerChangeListener)
[2016-06-10 02:21:45,540] DEBUG [Channel manager on controller 0]: Controller 0 trying to connect to broker 0 (kafka.controller.ControllerChannelManager)
[2016-06-10 02:21:45,540] INFO [Controller-0-to-broker-0-send-thread], Controller 0 connected to id:0,host:localhost,port:9092 for sending state change requests (kafka.controller.RequestSendThread)
[2016-06-10 02:21:45,540] INFO [Controller 0]: New broker startup callback for 0 (kafka.controller.KafkaController)
[2016-06-10 02:21:45,541] INFO [Controller-0-to-broker-0-send-thread], Starting  (kafka.controller.RequestSendThread)
[2016-06-10 02:21:45,541] INFO [Replica state machine on controller 0]: Invoking state change to OnlineReplica for replicas [Topic=get_social_events,Partition=1,Replica=0],[Topic=get_social_events,Partition=0,Replica=0] (kafka.controller.ReplicaStateMachine)
[2016-06-10 02:21:45,543] DEBUG [OfflinePartitionLeaderSelector]: Some broker in ISR is alive for [get_social_events,1]. Select 0 from ISR 0 to be the leader. (kafka.controller.OfflinePartitionLeaderSelector)
[2016-06-10 02:21:45,543] INFO [OfflinePartitionLeaderSelector]: Selected new leader and ISR {"leader":0,"leader_epoch":2,"isr":[0]} for offline partition [get_social_events,1] (kafka.controller.OfflinePartitionLeaderSelector)
[2016-06-10 02:21:45,544] DEBUG [Partition state machine on Controller 0]: After leader election, leader cache is updated to Map([get_social_events,1] -> (Leader:0,ISR:0,LeaderEpoch:2,ControllerEpoch:4), [get_social_events,0] -> (Leader:0,ISR:0,LeaderEpoch:1,ControllerEpoch:3)) (kafka.controller.PartitionStateMachine)
[2016-06-10 02:21:45,545] DEBUG [OfflinePartitionLeaderSelector]: Some broker in ISR is alive for [get_social_events,0]. Select 0 from ISR 0 to be the leader. (kafka.controller.OfflinePartitionLeaderSelector)
[2016-06-10 02:21:45,546] INFO [OfflinePartitionLeaderSelector]: Selected new leader and ISR {"leader":0,"leader_epoch":2,"isr":[0]} for offline partition [get_social_events,0] (kafka.controller.OfflinePartitionLeaderSelector)
[2016-06-10 02:21:45,546] DEBUG [Partition state machine on Controller 0]: After leader election, leader cache is updated to Map([get_social_events,1] -> (Leader:0,ISR:0,LeaderEpoch:2,ControllerEpoch:4), [get_social_events,0] -> (Leader:0,ISR:0,LeaderEpoch:2,ControllerEpoch:4)) (kafka.controller.PartitionStateMachine)
[2016-06-10 02:21:45,547] DEBUG [TopicChangeListener on Controller 0]: Topic change listener fired for path /brokers/topics with children get_social_events (kafka.controller.PartitionStateMachine$TopicChangeListener)
[2016-06-10 02:21:45,547] INFO [TopicChangeListener on Controller 0]: New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.PartitionStateMachine$TopicChangeListener)
[2016-06-10 02:21:45,550] INFO [AddPartitionsListener on 0]: Add Partition triggered {"version":1,"partitions":{"1":[0],"0":[0]}} for path /brokers/topics/get_social_events (kafka.controller.PartitionStateMachine$AddPartitionsListener)
[2016-06-10 02:21:45,551] INFO [BrokerChangeListener on Controller 0]: Broker change listener fired for path /brokers/ids with children 0 (kafka.controller.ReplicaStateMachine$BrokerChangeListener)
[2016-06-10 02:21:45,553] INFO [BrokerChangeListener on Controller 0]: Newly added brokers: , deleted brokers: , all live brokers: 0 (kafka.controller.ReplicaStateMachine$BrokerChangeListener)
[2016-06-10 02:21:50,537] TRACE [Controller 0]: checking need to trigger partition rebalance (kafka.controller.KafkaController)
[2016-06-10 02:21:50,537] DEBUG [Controller 0]: preferred replicas by broker Map(0 -> Map([get_social_events,1] -> List(0), [get_social_events,0] -> List(0))) (kafka.controller.KafkaController)
[2016-06-10 02:21:50,537] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-06-10 02:21:50,537] TRACE [Controller 0]: leader imbalance ratio for broker 0 is 0.000000 (kafka.controller.KafkaController)
[2016-06-10 02:26:50,522] TRACE [Controller 0]: checking need to trigger partition rebalance (kafka.controller.KafkaController)
[2016-06-10 02:26:50,523] DEBUG [Controller 0]: preferred replicas by broker Map(0 -> Map([get_social_events,1] -> List(0), [get_social_events,0] -> List(0))) (kafka.controller.KafkaController)
[2016-06-10 02:26:50,523] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-06-10 02:26:50,523] TRACE [Controller 0]: leader imbalance ratio for broker 0 is 0.000000 (kafka.controller.KafkaController)
[2016-06-10 02:31:50,509] TRACE [Controller 0]: checking need to trigger partition rebalance (kafka.controller.KafkaController)
[2016-06-10 02:31:50,509] DEBUG [Controller 0]: preferred replicas by broker Map(0 -> Map([get_social_events,1] -> List(0), [get_social_events,0] -> List(0))) (kafka.controller.KafkaController)
[2016-06-10 02:31:50,509] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-06-10 02:31:50,509] TRACE [Controller 0]: leader imbalance ratio for broker 0 is 0.000000 (kafka.controller.KafkaController)
[2016-06-10 02:36:50,497] TRACE [Controller 0]: checking need to trigger partition rebalance (kafka.controller.KafkaController)
[2016-06-10 02:36:50,498] DEBUG [Controller 0]: preferred replicas by broker Map(0 -> Map([get_social_events,1] -> List(0), [get_social_events,0] -> List(0))) (kafka.controller.KafkaController)
[2016-06-10 02:36:50,498] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-06-10 02:36:50,498] TRACE [Controller 0]: leader imbalance ratio for broker 0 is 0.000000 (kafka.controller.KafkaController)
[2016-06-10 02:41:50,481] TRACE [Controller 0]: checking need to trigger partition rebalance (kafka.controller.KafkaController)
[2016-06-10 02:41:50,482] DEBUG [Controller 0]: preferred replicas by broker Map(0 -> Map([get_social_events,1] -> List(0), [get_social_events,0] -> List(0))) (kafka.controller.KafkaController)
[2016-06-10 02:41:50,482] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-06-10 02:41:50,482] TRACE [Controller 0]: leader imbalance ratio for broker 0 is 0.000000 (kafka.controller.KafkaController)
[2016-06-10 02:46:50,470] TRACE [Controller 0]: checking need to trigger partition rebalance (kafka.controller.KafkaController)
[2016-06-10 02:46:50,471] DEBUG [Controller 0]: preferred replicas by broker Map(0 -> Map([get_social_events,1] -> List(0), [get_social_events,0] -> List(0))) (kafka.controller.KafkaController)
[2016-06-10 02:46:50,471] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-06-10 02:46:50,471] TRACE [Controller 0]: leader imbalance ratio for broker 0 is 0.000000 (kafka.controller.KafkaController)
[2016-06-10 02:51:50,453] TRACE [Controller 0]: checking need to trigger partition rebalance (kafka.controller.KafkaController)
[2016-06-10 02:51:50,453] DEBUG [Controller 0]: preferred replicas by broker Map(0 -> Map([get_social_events,1] -> List(0), [get_social_events,0] -> List(0))) (kafka.controller.KafkaController)
[2016-06-10 02:51:50,453] DEBUG [Controller 0]: topics not in preferred replica Map() (kafka.controller.KafkaController)
[2016-06-10 02:51:50,453] TRACE [Controller 0]: leader imbalance ratio for broker 0 is 0.000000 (kafka.controller.KafkaController)
